---
title: "Untitled"
format: html
editor: visual
---

Packages.

```{r}
library(here)
library(tidyverse)
library(janitor)
library(lme4)
library(ggthemes)
```




Filtering/Preprocessing

```{r}
demographics <- read_csv(here("data","prolific_demographics_experiment2.csv")) 
experiment <- read_csv(here("data", "amg_gamelogs_experiment2.csv")) |>
  clean_names() 

# Get list of participants with a return code and who are not colorblind
filtered_demographics_df <- demographics |>
  filter(`Completion code` == 'CTVM94DF') |>
  filter(Colourblindness != "Yes, I'm colourblind")
participant_ids <- filtered_demographics_df$`Participant id`
prolific_ids_with_logging_errors <- c('5eaa5d8b040c211e56dc98c0', '5f1215c24862ae13032bad4e', '610898813e48dc2864965122', '655fd299a33617af94bb00ee', '6561f9edfd7315a2f858adff', '656f47c38d6a2aa50bccb845')

# Filter Out Participant, and other
prolific_ids_to_remove <- experiment |>
    filter(refresh_count > 0) |>
    distinct(prolific_id) |>
    pull(prolific_id)

filtered_experiment_df <- experiment |>
  filter(prolific_id %in% participant_ids) |> # Keep only participants with no colorblindness and a return code
  filter(prolific_id != '6509ef2182c4abf47b1cb961') |> # user gas a watch game_type with block_index=2 -- bug, use  filter(block_index == 2, game_type == 'watch') to find
  filter(game_type != 'practice') |> # filter out practice trials 
  filter(game_type != 'complete') |> # filter out complete trials -- note that they completed the experiment
  filter(!prolific_id %in% prolific_ids_to_remove) |> # filter out participants who refreshed their page
  filter(!prolific_id %in% prolific_ids_with_logging_errors) |> # filter out participants with logging errors
  select(-id, -`v`, -payoffs, -policy) 
# 1
filtered_experiment_df

# Preprocessing 
preprocessed_experiment_df <-  filtered_experiment_df |>
  mutate(
    teacher = ifelse(block_id == "block_type3", "None", teacher),  # Updating 'teacher' column
    block_condition = case_when(
      block_id == "block_type1" ~ "play watch play",
      block_id == "block_type2" ~ "watch play play",
      block_id == "block_type3" ~ "play play play",
      TRUE ~ NA_character_  # Handle other cases (if any)
    )
  ) |>
  mutate(teacher = ifelse(block_id == "block_type3", "no teacher", teacher)) |>
  group_by(prolific_id, condition_index, block_condition) |>
  mutate(teacher = ifelse(all(is.na(teacher)), NA, first(na.omit(teacher))))  |> # Replace NA values in 'teacher' column with the non-NA value in the group
  #arrange(prolific_id, condition_index, block_index, game_type) |>
  ungroup() |>
  rename('teacher_condition' = 'teacher')
write_csv(preprocessed_experiment_df, here("data","preprocessed_gamelogs_experiment2.csv"))
# 2
preprocessed_experiment_df

# Summarized Human Scores
human_scores <- preprocessed_experiment_df |>
  filter(action == 'shoot') |> # recently added
  select(prolific_id, step, position, action, block_condition, teacher_condition, game_type, block_id, condition_index, block_index, condition_count_index , total_reward, refresh_count) |>
  group_by(prolific_id, condition_index, condition_count_index, block_condition, teacher_condition, block_index, game_type) |>
  summarise(total_reward = max(total_reward),
            choice_variance = var(position),
            choice_entropy = {
              p <- table(position) / length(position)
              -sum(p * log2(p), na.rm = TRUE)
            }) |> # recently added
  ungroup() |>
  select(prolific_id, teacher_condition, block_condition, block_index, game_type, condition_index, condition_count_index, total_reward, choice_variance, choice_entropy)
human_scores$method <- "Humans"
write_csv(human_scores, here("data","exp2_human_performance.csv"))
# 3
human_scores

# compute avg time taken to complete
filtered_experiment_df |>
  group_by(prolific_id) |>
  summarise(time = max(timestamp) - min(timestamp)) |>
  ungroup()
```

Human Performance

```{r}
human_mean_block_scores <- human_scores |>
  group_by(teacher_condition, block_condition, block_index, game_type) |>
  summarize(mean_reward = mean(total_reward),
            sd_reward = sd(total_reward),
            sem_reward = sd(total_reward)/sqrt(length(total_reward)),
            ci_reward = 1.96 * sem_reward)  |>
    mutate(block_condition = case_when(
    block_condition == "play play play" ~ "play-play-play",
    block_condition == "play watch play" ~ "play-watch-play",
    block_condition == "watch play play" ~ "watch-play-play",
    TRUE ~ block_condition  # Keep the original value if none of the conditions match
  ))
human_mean_block_scores

shaded_bands <- data.frame(
  block_condition = unique(human_mean_block_scores$block_condition),
  xmin = c(0.5, -0.5, 0),  # These should be the start positions of 'watch' game types
  xmax = c(1.5, 0.5, 0)   # These should be the end positions of 'watch' game types
)

p <- ggplot(human_mean_block_scores, 
       aes(x = block_index, y = mean_reward, col = teacher_condition)) +
  facet_wrap(~block_condition) + 
  geom_rect(data = shaded_bands, aes(xmin = xmin, xmax = xmax, ymin = -Inf, ymax = Inf),
            inherit.aes = FALSE, fill = "red", alpha = 0.3) + 
  geom_pointrange(aes(shape = game_type, ymin = mean_reward - ci_reward, 
                      ymax = mean_reward + ci_reward), 
                  position = position_dodge(width = .1)) +
  labs(x='Block Index', y = "Mean Reward", color='Teacher', shape="Game") +
  theme(
    panel.spacing.x = unit(1.5, "lines"), 
    panel.spacing.y = unit(0.7, "lines"), 
    legend.position = "top",
    text = element_text(size = 26),  # Base size for all text
    axis.title = element_text(size = 26),  # Size for axis titles
    axis.text = element_text(size = 26),  # Size for axis text
    legend.title = element_text(size = 26),  # Size for legend title
    legend.text = element_text(size = 26)  # Size for legend item text
  ) + 
  geom_line() +
  ylim(10, 20) +
  scale_x_continuous(breaks = seq(0, max(human_mean_block_scores$block_index), by = 1))+ 
  scale_color_manual(values=c("expert" = "#4477AA", "novice" = "#CC6677"), na.value = 'black') +
  theme_bw() +
  theme(
    strip.text.x = element_text(size = 16),  # Size for facet titles on the x-axis
    axis.title.x = element_text(size = 16),  # Size for x-axis label
    axis.title.y = element_text(size = 16),  # Size for x-axis label
    legend.text = element_text(size = 16),
    legend.title = element_text(size = 16),  # Size for legend title
    axis.text = element_text(size = 16),
  )

# Save the plot
ggsave(here("figures", "experiment_results.pdf"), plot = p, width = 7.5, height = 4)
p
```
Mixed Effects Model

```{r}

human_final_play_rewards <- preprocessed_experiment_df |>
  select(prolific_id, step, position, action, block_condition, teacher_condition, game_type, block_id, condition_index, block_index, condition_count_index , total_reward, refresh_count) |>
  group_by(prolific_id, condition_count_index, block_condition, teacher_condition, block_index, game_type) |>
  summarise(total_reward = max(total_reward)) |>
    filter(block_index == 2) |>
  # filter(block_condition!='play play play') |>
  ungroup() |>
  select(prolific_id, teacher_condition, block_condition, block_index, game_type, condition_count_index, total_reward)

human_final_play_rewards

human_final_play_rewards$block_condition <- factor(human_final_play_rewards$block_condition, levels = c("play watch play", "watch play play", "play play play"))

lm <- lmer(total_reward ~ block_condition * teacher_condition + 
             (block_condition * teacher_condition | prolific_id), 
           data = human_final_play_rewards)

summary(lm)
sjPlot:: tab_model(lm, show.df=TRUE, show.std = TRUE)
```


Human-Model Comparison

```{r}
human_scores

method <- "ucb"
if (method == "thompson") {
  model1_scores <- read_csv(here("data/model_results", "thompson_model_performance_seed_10_1_3.csv"))
  model2_scores <- read_csv(here("data/model_results", "thompson_model_performance_seed_11_2_4.csv"))
  model3_scores <- read_csv(here("data/model_results", "thompson_model_performance_seed_12_5_6.csv"))
  model_reward_results_figure_filename <- "thompson_reward_modeling_results.pdf"
  model_entropy_results_figure_filename <- "thompson_entropy_modeling_results.pdf"
} else if (method == "ucb") {
  model1_scores <- read_csv(here("data/model_results", "ucb_model_performance_seed_10_1_3.csv"))
  model2_scores <- read_csv(here("data/model_results", "ucb_model_performance_seed_11_2_4.csv"))
  model3_scores <- read_csv(here("data/model_results", "ucb_model_performance_seed_12_5_6.csv"))
  model_reward_results_figure_filename <- "ucb_reward_modeling_results.pdf"
  model_entropy_results_figure_filename <- "ucb_entropy_modeling_results.pdf"
} else {
  print("Unknown method")
}
combined_scores <- bind_rows(human_scores, model1_scores, model2_scores, model3_scores)
combined_scores

mean_block_scores <- combined_scores |>
  group_by(teacher_condition, block_condition, block_index, game_type, method) |>
  summarize(mean_reward = mean(total_reward),
            sd_reward = sd(total_reward),
            sem_reward = sd(total_reward)/sqrt(length(total_reward)),
            ci_reward = 1.96 * sem_reward,
            mean_choice_variance = mean(choice_variance),
            sem_choice_variance = sd(choice_variance)/sqrt(length(choice_variance)),
            ci_choice_variance = 1.96 * sem_choice_variance,
            mean_choice_entropy = mean(choice_entropy),
            sem_choice_entropy = sd(choice_entropy)/sqrt(length(choice_entropy)),
            ci_choice_entropy = 1.96 * sem_choice_entropy,
            )

mean_block_scores <- mean_block_scores |>
  filter(!game_type == 'watch') |>
    mutate(block_index_char = case_when(
    block_condition == "play watch play" & block_index == 0 ~ "1st-Play",
    block_condition == "play watch play" & block_index == 2 ~ "2nd-Play",
    block_condition == "watch play play" & block_index == 1 ~ "1st-Play",
    block_condition == "watch play play" & block_index == 2 ~ "2nd-Play",
    block_condition == "play play play" & block_index == 0 ~ "1st-Play",
    block_condition == "play play play" & block_index == 1 ~ "2nd-Play",
    block_condition == "play play play" & block_index == 2 ~ "3rd-Play",
    TRUE ~ as.character(block_index)  # Keep other values as they are, converting to character
  )) |>
  filter(!(block_condition == "play play play" & block_index == 2)) |>
  mutate(play_index = case_when(
    block_index_char == "1st-Play" ~ 0,
    block_index_char == "2nd-Play" ~ 1,
    TRUE ~ NA_real_  # Assign NA for cases that do not match the above conditions
  )) |>
  mutate(HumanOrModel = if_else(method=="Humans", method, "Model")) |>
    mutate(block_condition = case_when(
    block_condition == "play play play" ~ "play-play-play",
    block_condition == "play watch play" ~ "play-watch-play",
    block_condition == "watch play play" ~ "watch-play-play",
    TRUE ~ block_condition  # Keep the original value if none of the conditions match
  ))
  
mean_block_scores$method <- factor(mean_block_scores$method, levels = c(
  "Humans", "Naive Estimator", "Hybrid Choice-Only", "Hybrid Choice-Reward", "Trust"
  ))
mean_block_scores

# Add a new column for identifying where to mask the grid
mean_block_scores$mask_grid <- with(mean_block_scores, ifelse(method != "Humans", TRUE, FALSE))

p <- ggplot(mean_block_scores, aes(x = play_index, y = mean_reward, col = teacher_condition)) +
  facet_grid(method ~ block_condition) +
  geom_pointrange(aes(ymin = mean_reward - ci_reward, ymax = mean_reward + ci_reward), 
                  position = position_dodge(width = .1), size = 0.25) +
  labs(x='', y = "Mean Reward", color = "Teacher") +
  geom_line(aes(linetype=HumanOrModel)) +
  #ylim(11, 19) +
  scale_x_continuous(breaks = unique(mean_block_scores$play_index),
                     labels = unique(mean_block_scores$block_index_char)) + 
  scale_color_manual(values=c("expert" = "#4477AA", "novice" = "#CC6677"), na.value = 'black') +
  theme_bw() +
  theme(panel.spacing.x = unit(3, "lines"), 
        panel.spacing.y = unit(0.7, "lines"), 
        legend.position = "top",
        text = element_text(size = 26), 
        axis.title = element_text(size = 26), 
        axis.text = element_text(size = 18), 
        legend.text = element_text(size = 21), 
        legend.title = element_text(size = 22)) +
  guides(color = guide_legend(nrow = 1, byrow = TRUE), 
         linetype = "none") 

p
ggsave(here("figures", model_reward_results_figure_filename), plot = p, width = 10, height = 15)


any(is.na(mean_block_scores))
any(is.na(mean_block_scores$teacher_condition))
any(is.na(mean_block_scores$block_condition))
any(is.na(mean_block_scores$block_index))
any(is.na(mean_block_scores$mean_reward))
any(is.na(mean_block_scores$block_index_char))
any(is.na(mean_block_scores$ci_reward))
any(is.na(mean_block_scores$method))
```

```{r}
p <- ggplot(mean_block_scores, aes(x = play_index, y = mean_choice_variance, col = teacher_condition)) +
  facet_grid(method ~ block_condition) +
  #geom_rect(data = subset(mean_block_scores, mask_grid), 
  #          aes(xmin = -Inf, xmax = Inf, ymin = -Inf, ymax = Inf), 
  #          fill = "white", alpha = 1) +
  geom_pointrange(aes(ymin = mean_choice_variance - ci_choice_variance, ymax = mean_choice_variance + ci_choice_variance), 
                  position = position_dodge(width = .1), size = 0.25) +
  labs(x='', y = "Mean Entropy", color = "Teacher") +
  geom_line(aes(linetype=HumanOrModel)) +
  #ylim(11, 19) +
  scale_x_continuous(breaks = unique(mean_block_scores$play_index),
                     labels = unique(mean_block_scores$block_index_char)) + 
  scale_color_manual(values=c("expert" = "#4477AA", "novice" = "#CC6677"), na.value = 'black') +
  theme_bw() +
  theme(panel.spacing.x = unit(3, "lines"), 
        panel.spacing.y = unit(0.7, "lines"), 
        legend.position = "top",
        text = element_text(size = 26), 
        axis.title = element_text(size = 26), 
        axis.text = element_text(size = 18), 
        legend.text = element_text(size = 21), 
        legend.title = element_text(size = 22)) +
  guides(color = guide_legend(nrow = 1, byrow = TRUE), 
         linetype = "none") 

p
ggsave(here("figures",model_entropy_results_figure_filename), plot = p, width = 10, height = 15)
```

Condition Level Human-Model Correlation

```{r}
#condition_ = 'play watch play'
#condition_ = 'watch play play'
thompson_rewards <- mean_block_scores |>
  #filter(block_condition == condition_) |>
  filter(method == 'Hybrid Choice-Reward') |> 
  arrange(teacher_condition, block_index)

thompson_lesion_rewards <- mean_block_scores |>
  #filter(block_condition == condition_) |>
  filter(method == 'Hybrid Choice-Only') |> 
  arrange(teacher_condition, block_index)

thompson_naive_rewards <- mean_block_scores |>
  #filter(block_condition == condition_) |>
  filter(method == 'Naive Estimator') |> 
  arrange(teacher_condition, block_index)

thompson_trust_rewards <- mean_block_scores |>
  #filter(block_condition == condition_) |>
  filter(method == 'Trust') |> 
  arrange(teacher_condition, block_index)

human_rewards <- mean_block_scores |>
  #filter(block_condition == condition_) |>
  filter(method == 'Humans') |> 
  arrange(teacher_condition, block_index)
human_rewards

print('Mean Reward')
print("Naive Estimator")
correlation <- cor.test(human_rewards$mean_reward, thompson_naive_rewards$mean_reward)
rmse<- sqrt(mean((human_rewards$mean_reward - thompson_naive_rewards$mean_reward)^2))
print(correlation$estimate)
print(correlation$p.value)
print(rmse)

print("Hybrid Choice-Only")
correlation <- cor.test(human_rewards$mean_reward, thompson_lesion_rewards$mean_reward)
rmse <- sqrt(mean((human_rewards$mean_reward - thompson_lesion_rewards$mean_reward)^2))
print(correlation$estimate)
print(correlation$p.value)
print(rmse)


print("Hybrid Choice-Reward")
correlation <- cor_test_result <- cor.test(human_rewards$mean_reward, thompson_rewards$mean_reward)
rmse <- sqrt(mean((human_rewards$mean_reward - thompson_rewards$mean_reward)^2))
print(correlation$estimate)
print(correlation$p.value)
print(rmse)

print("Mean Entropy")
print("Naive Estimator")
correlation <- cor.test(human_rewards$mean_choice_variance, thompson_naive_rewards$mean_choice_variance)
rmse<- sqrt(mean((human_rewards$mean_choice_variance - thompson_naive_rewards$mean_choice_variance)^2))
print(correlation$estimate)
print(correlation$p.value)
print(rmse)

print("Hybrid Choice-Only")
correlation <- cor.test(human_rewards$mean_choice_variance, thompson_lesion_rewards$mean_choice_variance)
rmse <- sqrt(mean((human_rewards$mean_choice_variance - thompson_lesion_rewards$mean_choice_variance)^2))
print(correlation$estimate)
print(correlation$p.value)
print(rmse)


print("Hybrid Choice-Reward")
correlation <- cor_test_result <- cor.test(human_rewards$mean_choice_variance, thompson_rewards$mean_choice_variance)
rmse <- sqrt(mean((human_rewards$mean_choice_variance - thompson_rewards$mean_choice_variance)^2))
print(correlation$estimate)
print(correlation$p.value)
print(rmse)





```




Participant Level Human-Model Correlation
```{r}
model_human_rewards <- combined_scores |>
  filter(method!="Humans")
model_human_rewards

thompson_naive <- model_human_rewards |>
  filter(method == 'Naive Estimator')

thompson_predict <- model_human_rewards |>
  filter(method == 'Hybrid Choice-Reward')

thompson_lesion <- model_human_rewards |>
  filter(method == 'Hybrid Choice-Only')

naive_corr <- cor.test(thompson_naive$total_reward, thompson_naive$human_total_reward)
predict_corr <- cor.test(thompson_predict$total_reward, thompson_predict$human_total_reward)
lesion_corr <- cor.test(thompson_lesion$total_reward, thompson_lesion$human_total_reward)

print("Naive Estimator")
print(naive_corr)

print("Hybrid Choice Reward")
print(predict_corr)

print("Hybrid Choice-Only")
print(lesion_corr)


thompson_naive_rmse <- sqrt(mean((thompson_naive$total_reward - thompson_naive$human_total_reward)^2))
thompson_predict_rmse <- sqrt(mean((thompson_predict$total_reward - thompson_predict$human_total_reward)^2))
thompson_lesion_rmse <- sqrt(mean((thompson_lesion$total_reward - thompson_lesion$human_total_reward)^2))

print("Naive Estimator RMSE")
print(thompson_naive_rmse)

print("Hybrid Reward-Choice RMSE")
print(thompson_predict_rmse)

print("Hybrid Choice-Only RMSE")
print(thompson_lesion_rmse)

```

```{r}
model_human_rewards <- combined_scores |>
  filter(method!="Humans")
model_human_rewards

thompson_naive <- model_human_rewards |>
  filter(method == 'Naive Estimator')

thompson_predict <- model_human_rewards |>
  filter(method == 'Hybrid Choice-Reward')

thompson_lesion <- model_human_rewards |>
  filter(method == 'Hybrid Choice-Only')

naive_corr <- cor.test(thompson_naive$choice_variance, thompson_naive$human_choice_variance)
predict_corr <- cor.test(thompson_predict$choice_variance, thompson_predict$human_choice_variance)
lesion_corr <- cor.test(thompson_lesion$choice_variance, thompson_lesion$human_choice_variance)

print("Naive Estimator")
print(naive_corr)

print("Hybrid Choice Reward")
print(predict_corr)

print("Hybrid Choice-Only")
print(lesion_corr)


thompson_naive_rmse <- sqrt(mean((thompson_naive$choice_variance - thompson_naive$human_choice_variance)^2))
thompson_predict_rmse <- sqrt(mean((thompson_predict$choice_variance - thompson_predict$human_choice_variance)^2))
thompson_lesion_rmse <- sqrt(mean((thompson_lesion$choice_variance - thompson_lesion$human_choice_variance)^2))

print("Naive Estimator RMSE")
print(thompson_naive_rmse)

print("Hybrid Reward-Choice RMSE")
print(thompson_predict_rmse)

print("Hybrid Choice-Only RMSE")
print(thompson_lesion_rmse)




```